{"name":"php-apkparser","tagline":"A library.","body":"# php-apkparser\r\nA small library for parsing Android application package files (__APK__ s).\r\n\r\n\r\nRequirements\r\n============\r\nIt is possible that these may or may not be necessary, or perhaps require a small modification to work.\r\n* [**PHP 5.3.0**](http://php.net/releases/5_3_0.php)+ · the use of the 'const' keyword outside of classes\r\n* [**iconv**](http://lu1.php.net/manual/en/function.iconv.php) · Android packages deal with many languages, and use UTF-16 when applicable\r\n\r\nPerformance\r\n===========\r\nHorrible.\r\n\r\n\r\nUsage\r\n=====\r\n\r\nSimple\r\n------\r\nTo display some basic information about the package:\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once 'lib/parser.php';\r\n\r\n$apk = new \\APKParser\\APK('example.apk');\r\n\r\nprintf(\"-name = '%s'\\n\", $apk->get_package());\r\nprintf(\"-version = '%s (%s)'\\n\", $apk->get_androidversion_name(), $apk->get_androidversion_code());\r\nprintf(\"-min_sdk_version = '%s'\\n\", $apk->get_min_sdk_version());\r\nvar_export($apk->get_permissions());\r\n```\r\n\r\nManifest\r\n--------\r\nYou may also get the `AndroidManifest.xml` [**DOMDocument**](http://www.php.net/manual/en/class.domdocument.php) object:\r\n\r\n```php\r\n$apk = new \\APKParser\\APK('example.apk');\r\n$manifest = $apk->get_android_manifest_xml();\r\n\r\nprintf(\"-object = '%s'\", get_class($manifest));\r\n```\r\n\r\n...or perhaps you wish to get `AndroidManifest.xml` as a string (why?):\r\n\r\n```php\r\n// First method.\r\n$manifest_i = $apk->get_android_manifest_axml()->get_buff();\r\n\r\n// Second method.\r\n$manifest_d = $apk->get_android_manifest_xml->saveXML();\r\n```\r\n\r\n...OR YOU WANT AN ELEMENT ATTRIBUTE VALUE:\r\n\r\n```php\r\n$app_name = $apk->get_element('application', 'android:name');\r\nprintf(\"-application_name = '%s%s'\", $apk->get_package(), $app_name);\r\n\r\n$activities = $apk->get_elements('activity', 'android:name');\r\nvar_export($activities);\r\n```\r\n\r\nResources\r\n---------\r\nSome applications define their manifest attribute values as references:\r\n\r\n```xml\r\n...\r\n<application android:icon=\"@drawable/mushrooms\" android:label=\"Mushrooms\"/>\r\n...\r\n```\r\n...which upon APK compilation are converted into resource IDs and now parsed by the parser\r\ninto **hex** codes for convenience.\r\n\r\n```php\r\nprintf(\"%s\", $apk->get_androidversion_name()); // prints '@<hex>', e.g.: '@7f0b000d'\r\n```\r\n\r\nThese resource IDs have to be decoded:\r\n\r\n```php\r\n$arscobj = $apk->get_android_resources();\r\n$vn_res_id = substr($apk->get_androidversion_name(), 1);\r\nprintf(\"%s\", $arscobj->get_resource_value_by_reference($vn_res_id));\r\n```\r\n\r\nResource values may be paths to files inside the package:\r\n\r\n```php\r\n$app_icon = $apk->get_element('application', 'android:icon'); // @<hex>\r\n\r\n$arscobj = $apk->get_android_resources();\r\nvar_export($arscobj->get_resource_value_by_reference(substr($app_icon, 1)));\r\n/*\r\narray (\r\n  0 => 'res/drawable-mdpi/mushrooms.png',\r\n  1 => 'res/drawable-hdpi/mushrooms.png',\r\n  2 => 'res/drawable-xhdpi/mushrooms.png',\r\n)\r\n */\r\n```\r\n\r\n...which you can get as a stream from the package (and then use as you wish):\r\n\r\n```php\r\n$icon = $arscobj->get_resource_value_by_reference(substr($app_icon, 1))[0];\r\n$icon_stream = $apk->get_file($icon);\r\n$base64_string = base64_encode(stream_get_contents($icon_stream));\r\n\r\nprintf(\"data:image/png;base64,%s\", $base64_string);\r\n```\r\n\r\nDevelopers decide whether attribute values will hold references or actual values,\r\nwhich means it is best to cover all cases for reliable results.\r\n\r\n\r\nAcknowledgements\r\n================\r\n* the [**Androguard**](https://code.google.com/p/androguard/) project from which parts of the code was ported from\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}